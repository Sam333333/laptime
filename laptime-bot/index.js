
const { Telegraf, Markup } = require('telegraf');
const moment = require('moment-timezone');

const bot = new Telegraf(process.env.BOT_TOKEN);

let session = null;
let laps = {};
let timers = {};

const drivers = [99, 101, 49, 57, 97, 34, 50, 45, 111];
const tracks = [
  '–ê–≤—Ç–æ–¥—Ä–æ–º Moscow Raceway',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ò–≥–æ—Ä–∞ –î—Ä–∞–π–≤',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–µ –∫–æ–ª—å—Ü–æ',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ö–∞–∑–∞–Ω—å –†–∏–Ω–≥'
];

bot.start((ctx) => {
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é¬ª', Markup.keyboard([
    ['–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é']
  ]).resize());
});

bot.hears('–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é', (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞—Å—Å—É:', Markup.keyboard(tracks.map(t => [t])).resize());
});

bot.hears(tracks, (ctx) => {
  const track = ctx.message.text;
  const time = moment().tz('Europe/Moscow').format('YYYY-MM-DD HH:mm:ss');
  session = { track, start: time };
  laps = {}; timers = {};
  ctx.reply(`‚úÖ –°–µ—Å—Å–∏—è –Ω–∞ —Ç—Ä–∞—Å—Å–µ "${track}" –Ω–∞—á–∞—Ç–∞ –≤ ${time}`, Markup.keyboard([
    [ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º' ],
    [ '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º' ],
    ...chunk(drivers, 3).map(row => row.map(d => `${d}`)),
    [ '–ù–∞–∑–∞–¥' ]
  ]).resize());
});

bot.hears(drivers.map(String), (ctx) => {
  const num = ctx.message.text;
  const now = Date.now();
  if (!timers[num]) {
    timers[num] = now;
    ctx.reply(`‚è± –°—Ç–∞—Ä—Ç –∫—Ä—É–≥–∞ –¥–ª—è ‚Ññ${num}`);
  } else {
    const diff = now - timers[num];
    const formatted = formatMs(diff);
    delete timers[num];
    if (!laps[num]) laps[num] = [];
    laps[num].push(formatted);
    ctx.reply(`üèÅ –ö—Ä—É–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Ññ${num}: ${formatted}`);
  }
});

bot.hears('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', (ctx) => {
  ctx.reply('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
});

bot.hears('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º', (ctx) => {
  let text = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º:
';
  for (const [num, list] of Object.entries(laps)) {
    list.forEach((time, i) => {
      text += `‚Ññ${num} ‚Äî –°–µ—Å—Å–∏—è ${i + 1}: ${time}
`;
    });
  }
  ctx.reply(text || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
});

bot.hears('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º', (ctx) => {
  let text = 'üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º:
';
  for (const [num, list] of Object.entries(laps)) {
    const best = list.sort()[0];
    text += `‚Ññ${num} ‚Äî –ª—É—á—à–∏–π –∫—Ä—É–≥: ${best}
`;
  }
  ctx.reply(text || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
});

bot.launch();

function formatMs(ms) {
  const min = Math.floor(ms / 60000);
  const sec = Math.floor((ms % 60000) / 1000);
  const msLeft = ms % 1000;
  return `${min}:${String(sec).padStart(2, '0')}.${String(msLeft).padStart(3, '0')}`;
}

function chunk(arr, size) {
  const res = [];
  for (let i = 0; i < arr.length; i += size) {
    res.push(arr.slice(i, i + size));
  }
  return res;
}
