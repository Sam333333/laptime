const { Telegraf, Markup } = require('telegraf');
const moment = require('moment-timezone');

const bot = new Telegraf(process.env.BOT_TOKEN);

const drivers = ['99', '101', '49', '57', '97', '34', '50', '45', '111'];
const tracks = [
  '–ê–≤—Ç–æ–¥—Ä–æ–º Moscow Raceway',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ò–≥–æ—Ä–∞ –î—Ä–∞–π–≤',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–µ –∫–æ–ª—å—Ü–æ',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ö–∞–∑–∞–Ω—å –†–∏–Ω–≥'
];

let session = {
  active: false,
  track: '',
  date: '',
  times: {},
  lastStart: {}
};

bot.start((ctx) => {
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
    ['üö¶ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é'],
    ['üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º', 'üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º'],
    ['üèÜ –†–µ–π—Ç–∏–Ω–≥']
  ]).resize());
});

bot.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', (ctx) => {
  ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', Markup.keyboard([
    ['üö¶ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é'],
    ['üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º', 'üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º'],
    ['üèÜ –†–µ–π—Ç–∏–Ω–≥']
  ]).resize());
});

bot.hears('üö¶ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é', (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞—Å—Å—É:', Markup.keyboard([
    ...tracks.map(track => [track]),
    ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
  ]).resize());
});

tracks.forEach(track => {
  bot.hears(track, (ctx) => {
    session.active = true;
    session.track = track;
    session.date = moment().tz('Europe/Moscow').format('YYYY-MM-DD HH:mm');
    session.times = {};
    session.lastStart = {};
    drivers.forEach(n => {
      session.times[n] = [];
      session.lastStart[n] = null;
    });

    ctx.reply(
      `üèÅ –°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å!\nüìç –¢—Ä–∞—Å—Å–∞: ${track}\nüìÖ –î–∞—Ç–∞: ${session.date}\n\nüîò –ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–Ω—â–∏–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å/–∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—Ä—É–≥:`,
      Markup.keyboard([
        ['99', '101', '49'],
        ['57', '97', '34'],
        ['50', '45', '111'],
        ['üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', '‚óÄÔ∏è –ù–∞–∑–∞–¥']
      ]).resize()
    );
  });
});

bot.hears(drivers, (ctx) => {
  if (!session.active) {
    return ctx.reply('‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é.', Markup.keyboard([
      ['üö¶ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é']
    ]).resize());
  }

  const driver = ctx.message.text;
  const now = Date.now();

  if (!session.lastStart[driver]) {
    session.lastStart[driver] = now;
    ctx.reply(`‚è± –°—Ç–∞—Ä—Ç –∫—Ä—É–≥–∞ –¥–ª—è ‚Ññ${driver}`);
  } else {
    const lapTime = now - session.lastStart[driver];
    session.lastStart[driver] = null;
    session.times[driver].push(lapTime);
    const formatted = formatTime(lapTime);
    ctx.reply(`‚úÖ –ö—Ä—É–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è ‚Ññ${driver}: ${formatted}`);
  }
});

bot.hears('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', (ctx) => {
  session.active = false;
  ctx.reply('üõë –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', Markup.keyboard([
    ['üö¶ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é'],
    ['üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º', 'üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º'],
    ['üèÜ –†–µ–π—Ç–∏–Ω–≥']
  ]).resize());
});

bot.hears('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º', (ctx) => {
  const driverData = [];

  for (const [num, lapsList] of Object.entries(session.times || {})) {
    if (!lapsList || lapsList.length === 0) continue;

    const bestTime = Math.min(...lapsList);
    const bestIndex = lapsList.findIndex(t => t === bestTime) + 1;
    const formattedBest = `ü•á ${formatTime(bestTime)} (–∫—Ä—É–≥ ${bestIndex})`;

    const otherLaps = lapsList
      .map((t, i) => ({ t, i }))
      .filter(({ t }) => t !== bestTime)
      .map(({ t, i }) => `${formatTime(t)} (–∫—Ä—É–≥ ${i + 1})`);

    const line = `‚Ä¢ ‚Ññ${num}: ${formattedBest}${otherLaps.length ? ' | ' + otherLaps.join(' | ') : ''}`;

    driverData.push({ number: num, best: bestTime, line });
  }

  if (driverData.length === 0) {
    return ctx.reply('‚ùó –ù–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—Ä—É–≥–æ–≤.');
  }

  driverData.sort((a, b) => a.best - b.best);

  const message = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º (–æ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∫ –º–µ–¥–ª–µ–Ω–Ω–æ–º—É):\n\n' +
    driverData.map(d => d.line).join('\n');

  ctx.reply(message);
});

bot.hears('üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º', (ctx) => {
  if (!session.date || !session.times) {
    return ctx.reply('‚ùó –°–µ—Å—Å–∏–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å.');
  }

  let text = `üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º:\n–î–∞—Ç–∞: ${session.date}\n–¢—Ä–∞—Å—Å–∞: ${session.track || '‚Äî'}\n\n`;

  const driversWithTimes = [];

  for (const [num, lapsList] of Object.entries(session.times)) {
    if (!lapsList || lapsList.length === 0) continue;

    const best = Math.min(...lapsList);
    const bestIndex = lapsList.findIndex(t => t === best);
    const bestLap = bestIndex + 1;
    const total = lapsList.length;

    const sessionIndex = Math.floor(bestIndex / 14) + 1;
    const sessionLap = bestLap - ((sessionIndex - 1) * 14);

    driversWithTimes.push({
      number: num,
      bestTime: best,
      line: `‚Ä¢ ‚Ññ${num}: ü•á ${formatTime(best)} (—Å–µ—Å—Å–∏—è ${sessionIndex}, –∫—Ä—É–≥ ${sessionLap}) ‚Äî –≤—Å–µ–≥–æ ${total} –∫—Ä—É–≥–æ–≤`
    });
  }

  if (driversWithTimes.length === 0) {
    return ctx.reply('‚ùó –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
  }

  driversWithTimes.sort((a, b) => a.bestTime - b.bestTime);

  text += driversWithTimes.map(d => d.line).join('\n');

  ctx.reply(text);
});

bot.hears('üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –∫—Ä—É–≥–æ–≤', (ctx) => {
  if (!session.times || !session.dates || session.dates.length === 0) {
    return ctx.reply('‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞—Ç.');
  }

  const driverRankings = [];

  for (const [num, laps] of Object.entries(session.times)) {
    if (!laps || laps.length === 0) continue;

    const best = Math.min(...laps);
    const bestIndex = laps.findIndex(t => t === best);
    const total = laps.length;

    const sessionIndex = Math.floor(bestIndex / 14) + 1;
    const sessionLap = bestIndex % 14 + 1;
    const dayIndex = Math.floor(bestIndex / 14); // 0-based
    const date = session.dates[dayIndex] || '‚Äî';

    driverRankings.push({
      number: num,
      bestTime: best,
      bestFormatted: formatTime(best),
      session: sessionIndex,
      lap: sessionLap,
      date,
      total,
    });
  }

  if (driverRankings.length === 0) {
    return ctx.reply('‚ùó –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
  }

  driverRankings.sort((a, b) => a.bestTime - b.bestTime);

  const medals = ['ü•á', 'ü•à', 'ü•â'];

  const text = 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –∫—Ä—É–≥–æ–≤:\n\n' +
    driverRankings.map((d, i) =>
      `${medals[i] || `${i + 1}.`} ‚Ññ${d.number}: ${d.bestFormatted} (${d.date}, —Å–µ—Å—Å–∏—è ${d.session}, –∫—Ä—É–≥ ${d.lap}) ‚Äî –≤—Å–µ–≥–æ ${d.total} –∫—Ä—É–≥–æ–≤`
    ).join('\n');

  ctx.reply(text);
});
// üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤
bot.command('rating', (ctx) => {
  const standings = [
    { number: '99', points: 155 },
    { number: '97', points: 114 },
    { number: '57', points: 105 },
    { number: '49', points: 92 },
    { number: '34', points: 90 },
    { number: '50', points: 71 },
    { number: '111', points: 59 },
    { number: '45', points: 56 },
    { number: '101', points: 17 },
  ];

  const medals = ['ü•á', 'ü•à', 'ü•â'];

  const sorted = standings.sort((a, b) => b.points - a.points);
  const lines = sorted.map((driver, idx) => {
    const medal = medals[idx] || '';
    return `${medal} #${driver.number} ‚Äî ${driver.points} –æ—á–∫–æ–≤`;
  });

  ctx.replyWithMarkdown(`üèÜ *–†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤*\n\n${lines.join('\n')}`);
});


// üìÖ –û—á–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º (–í–°–¢–ê–í–¨ –°–Æ–î–ê ‚Üì)
bot.command('stages', (ctx) => {
  const data = [
    { number: '99', stages: [51, 55, 49, 0, 0] },
    { number: '97', stages: [44, 28, 42, 0, 0] },
    { number: '57', stages: [32, 41, 32, 0, 0] },
    { number: '49', stages: [43, 38, 11, 0, 0] },
    { number: '34', stages: [25, 30, 35, 0, 0] },
    { number: '50', stages: [14, 16, 41, 0, 0] },
    { number: '111', stages: [18, 22, 19, 0, 0] },
    { number: '45', stages: [21, 18, 17, 0, 0] },
    { number: '101', stages: [0, 0, 17, 0, 0] },
  ];

  const sorted = data.map(d => ({
    ...d,
    total: d.stages.reduce((a, b) => a + b, 0)
  })).sort((a, b) => b.total - a.total);

  let text = 'üìÖ <b>–û—á–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º</b>\n\n';
  text += '<pre>–ü–æ–∑  ‚Ññ   –ò—Ç–æ–≥–æ   1   2   3   4   5</pre>\n';

  sorted.forEach((driver, i) => {
    const pos = String(i + 1).padStart(2, ' ');
    const num = driver.number.padStart(3, ' ');
    const total = String(driver.total).padStart(5, ' ');
    const stages = driver.stages.map(s => String(s).padStart(2, ' ')).join('  ');
    const medal = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : '';
    text += `<pre>${pos}. ${num} ${total}   ${stages} ${medal}</pre>\n`;
  });

  ctx.replyWithHTML(text);
});

  ctx.reply(text);
});

function formatTime(ms) {
  const minutes = Math.floor(ms / 60000);
  const seconds = Math.floor((ms % 60000) / 1000);
  const milliseconds = ms % 1000;
  return `${minutes}:${String(seconds).padStart(2, '0')}.${String(milliseconds).padStart(3, '0')}`;
}

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
