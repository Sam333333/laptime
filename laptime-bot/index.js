require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const moment = require('moment-timezone');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

let currentSession = null;
let sessionData = {};

const tracks = [
  '–ê–≤—Ç–æ–¥—Ä–æ–º Moscow Raceway',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ò–≥–æ—Ä–∞ –î—Ä–∞–π–≤',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–µ –∫–æ–ª—å—Ü–æ',
  '–ê–≤—Ç–æ–¥—Ä–æ–º –ö–∞–∑–∞–Ω—å –†–∏–Ω–≥'
];

const drivers = [99, 101, 49, 57, 97, 34, 50, 45, 111];

const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üö¶ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é'],
      ['üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º', 'üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º'],
      ['üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é'],
      ['üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∞–π–º–∏–Ω–≥-—Å–∏—Å—Ç–µ–º—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === 'üö¶ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é') {
    sessionData = {};
    currentSession = {
      track: null,
      date: moment().tz('Europe/Moscow').format('YYYY-MM-DD'),
      startTimes: {},
      laps: {}
    };
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞—Å—Å—É:', {
      reply_markup: {
        keyboard: tracks.map(t => [t]).concat([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]),
        resize_keyboard: true
      }
    });
  }

  if (tracks.includes(text)) {
    currentSession.track = text;
    drivers.forEach(num => {
      currentSession.laps[num] = [];
    });
    return bot.sendMessage(chatId, `–°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ ${text}. –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä–∞ –≥–æ–Ω—â–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä—É–≥–∞.`, {
      reply_markup: {
        keyboard: [
          [99, 101, 49].map(String),
          [57, 97, 34].map(String),
          [50, 45, 111].map(String),
          ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true
      }
    });
  }

  if (text === 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é') {
    if (currentSession) {
      sessionData[currentSession.date + ' ' + currentSession.track] = currentSession;
      currentSession = null;
      return bot.sendMessage(chatId, '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.', mainMenu);
    }
    return bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.', mainMenu);
  }

  if (text === 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–µ—Å—Å–∏—è–º') {
    let results = '';
    Object.entries(sessionData).forEach(([key, session]) => {
      results += `\nüìç ${session.track} ‚Äî ${session.date}\n`;
      const bestLaps = [];

      drivers.forEach(num => {
        const laps = session.laps[num] || [];
        if (laps.length > 0) {
          const best = laps.slice().sort((a, b) => a.time - b.time)[0];
          bestLaps.push({ num, ...best });
        }
      });

      bestLaps.sort((a, b) => a.time - b.time);
      bestLaps.forEach((lap, i) => {
        const symbol = i === 0 ? 'ü•á' : '  ';
        results += `${symbol} ${lap.num} ‚Äî ${formatMs(lap.time)} (–ö—Ä—É–≥ ${lap.lapIndex + 1})\n`;
      });
    });
    return bot.sendMessage(chatId, results || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
  }

  if (text === 'üìÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º') {
    let results = '';
    Object.entries(sessionData).forEach(([key, session]) => {
      results += `\nüìç ${session.track} ‚Äî ${session.date}\n`;
      drivers.forEach(num => {
        const laps = session.laps[num] || [];
        if (laps.length > 0) {
          const best = laps.slice().sort((a, b) => a.time - b.time)[0];
          results += `üîπ ${num} ‚Äî ${formatMs(best.time)} (–ö—Ä—É–≥ ${best.lapIndex + 1})\n`;
        }
      });
    });
    return bot.sendMessage(chatId, results || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
  }

  if (drivers.map(String).includes(text)) {
    const num = parseInt(text);
    if (!currentSession) return bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.');

    if (!currentSession.startTimes[num]) {
      currentSession.startTimes[num] = Date.now();
      return bot.sendMessage(chatId, `‚è± –ì–æ–Ω—â–∏–∫ ${num} —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∫—Ä—É–≥.`);
    } else {
      const end = Date.now();
      const lapTime = end - currentSession.startTimes[num];
      delete currentSession.startTimes[num];

      currentSession.laps[num].push({
        time: lapTime,
        lapIndex: currentSession.laps[num].length
      });

      return bot.sendMessage(chatId, `‚úÖ –ì–æ–Ω—â–∏–∫ ${num} –∑–∞–≤–µ—Ä—à–∏–ª –∫—Ä—É–≥: ${formatMs(lapTime)}`);
    }
  }

  if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
    return bot.sendMessage(chatId, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', mainMenu);
  }
});

function formatMs(ms) {
  const m = Math.floor(ms / 60000);
  const s = Math.floor((ms % 60000) / 1000);
  const msRest = ms % 1000;
  return `${m}:${s.toString().padStart(2, '0')}.${msRest.toString().padStart(3, '0')}`;
}
